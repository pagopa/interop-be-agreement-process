akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  management {
    http {
      hostname = "0.0.0.0"
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.agreementprocess.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.agreementprocess.server.impl.LiveCheck"
      }
    }
  }
}

agreement-process {
  port = 8088
  jwt {
    audience = "jdjdj"
  }
  user-registry-api-key = "sksksk"
  party-process-api-key =  "sksksk"
  services {
    catalog-management             = "https://gateway.interop.pdnd.dev/catalog-management/0.1"
    agreement-management           = "https://gateway.interop.pdnd.dev/agreement-management/0.1"
    attribute-registry-management  = "https://gateway.interop.pdnd.dev/attribute-registry-management/0.1"
    authorization-management       = "https://gateway.interop.pdnd.dev/authorization-management/0.1"
    tenant-management              = "https://gateway.interop.pdnd.dev/tenant-management/0.1"
    party-process                  = "https://gateway.interop.pdnd.dev/party-process/0.1"
    user-registry                  = "https://gateway.interop.pdnd.dev/user-registry/0.1"
  }

  envelope-queue-url = "dkdkdkdkd"

  storage {
    kind = "S3"
    container = "con"
    agreement-contract-path = "agreement/contracts"
    consumer-documents-path = "agreement/consumer-docs"
  }

  read-model {
    db {
      name ="ssss"
      connection-string = "mongodb://ddd:ddd@db:1234/ddd?directConnection=true&serverSelectionTimeoutMS=2000"
    }
  }
}

interop-commons {
  jwt {
    public-keys {
      urls = "https://uat.interop.pagopa.it/.well-known/jwks.json"
    }
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor.fixed-pool-size = 4
}
