openapi: 3.0.3
info:
  title: Agreement Process Micro Service
  description: Offers operations to retrieve agreement data
  version: 0.0.1
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: 'https://gateway.interop.pdnd.dev/pdnd-interop-uservice-agreement-process/0.0.1'
    description: This service is the agreement process
security:
  - bearerAuth: [ ]
tags:
  - name: process
    description: Implements agreement process
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: agreement
    description: Implements agreement process
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: consumer
    description: Implements consumer process
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /status:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/activate':
    parameters:
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: identifier of the pending agreement to be activated
    patch:
      summary: Agreement Activation
      operationId: activateAgreement
      responses:
        '204':
          description: Pending agreement activated.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: Activates the pending agreement if all the pre-requisites are met.
  '/agreements/{agreementId}/suspend':
    parameters:
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: identifier of the pending agreement to be suspended
    patch:
      summary: Suspend Agreement
      operationId: suspendAgreement
      responses:
        '204':
          description: Active agreement suspended.
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: Suspends the active agreement if all the pre-requisites are met.
  /agreements:
    post:
      summary: Agreement Creation
      operationId: createAgreement
      responses:
        '201':
          description: Agreement created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementPayload'
        description: payload for agreement creation
        required: true
      description: creates the agreement between the involved parties.
    get:
      summary: Retrieve a list of agreements
      operationId: getAgreements
      responses:
        '200':
          description: Agreements found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreements'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      parameters:
        - in: query
          name: producerId
          schema:
            type: string
        - in: query
          name: consumerId
          schema:
            type: string
        - in: query
          name: eserviceId
          schema:
            type: string
        - in: query
          name: descriptorId
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
            enum:
              - pending
              - active
              - suspended
        - in: query
          name: latest
          schema:
            type: boolean
  '/agreements/{agreementId}':
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - agreement
      summary: retrieves an agreement
      description: returns an agreement for a given agreementId
      operationId: getAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agreement found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/upgrade':
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - agreement
      summary: upgrades an agreement.
      description: upgrades an agreement with a newer eservice version, if any.
      operationId: upgradeAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agreement updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/attributes/{attributeId}/verify':
    parameters:
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: agreement identifier
      - schema:
          type: string
          format: uuid
        name: attributeId
        in: path
        description: verified attribute identifier
        required: true
    patch:
      summary: Verify agreement attribute
      operationId: verifyAgreementAttribute
      responses:
        '204':
          description: No Content
        '404':
          description: Attribute not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: set the agreement attribute as verified.
  '/consumers/{consumerId}/attributes':
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - consumer
      summary: retrieves consumer attributes
      description: returns all the attributes assigned to a consumer
      operationId: getAttributesByConsumerId
      parameters:
        - name: consumerId
          in: path
          description: The identifier of the consumer
          required: true
          schema:
            type: string
      responses:
        '200':
          description: attributes found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

components:
  schemas:
    AgreementPayload:
      type: object
      description: contains the information for agreement creation.
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
      required:
        - eserviceId
        - descriptorId
        - consumerId
    Organization:
      properties:
        id:
          type: string
        name:
          type: string
      additionalProperties: false
      required:
        - id
        - name
    EService:
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
      additionalProperties: false
      required:
        - id
        - name
        - version
    Agreement:
      properties:
        id:
          type: string
          format: uuid
        producer:
          $ref: '#/components/schemas/Organization'
        consumer:
          $ref: '#/components/schemas/Organization'
        eservice:
          $ref: '#/components/schemas/EService'
        status:
          type: string
          enum:
            - active
            - pending
            - suspended
        attributes:
          type: array
          items:
            type: object
            # TODO This should be oneOf, but openapi generator does not support it
            properties:
              single:
                $ref: '#/components/schemas/Attribute'
              group:
                type: array
                items:
                  $ref: '#/components/schemas/Attribute'
      additionalProperties: false
      required:
        - id
        - producer
        - consumer
        - eservice
        - attributes
        - status
    Agreements:
      type: array
      items:
        $ref: '#/components/schemas/Agreement'
    Audience:
      properties:
        producer:
          type: string
        audience:
          type: array
          items:
            type: string
      additionalProperties: false
      required:
        - producer
        - audience
    Attributes:
      type: object
      properties:
        certified:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        declared:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
        verified:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
      required:
        - certified
        - declared
        - verified
    Attribute:
      title: Attribute
      type: object
      description: Models the attribute registry entry as payload response
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          description: identifies the unique code of this attribute on the origin registry
        description:
          type: string
        origin:
          type: string
          description: 'represents the origin of this attribute (e.g.: IPA, Normattiva, etc.)'
        name:
          type: string
        verified:
          type: boolean
        verificationDate:
          type: string
          format: date-time
        validityTimespan:
          type: integer
          format: int64
      required:
        - id
        - description
        - name
    Problem:
      properties:
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: 'A short, summary of the problem type. Written in english and readable'
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
      additionalProperties: false
      required:
        - status
        - title
  securitySchemes:
    bearerAuth:
      type: http
      description: 'A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).'
      scheme: bearer
      bearerFormat: JWT