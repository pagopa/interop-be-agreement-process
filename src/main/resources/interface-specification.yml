openapi: 3.0.3
info:
  title: Agreement Process Micro Service
  description: Offers operations to retrieve agreement data
  version: '{{version}}'
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
  termsOfService: 'http://swagger.io/terms/'
  x-api-id: an x-api-id
  x-summary: an x-summary
servers:
  - url: '/agreement-process/{{version}}'
    description: This service is the agreement process
security:
  - bearerAuth: [ ]
tags:
  - name: health
    description: Verify service status
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: agreement
    description: Implements agreement process
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /status:
    get:
      security: [ ]
      tags:
        - health
      summary: Health status endpoint
      description: Return ok
      operationId: getStatus
      responses:
        '200':
          description: successful operation
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/submit':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: identifier of the pending agreement to be activated
    post:
      tags:
        - agreement
      summary: Agreement Sumbission
      description: Submit the draft agreement if all the pre-requisites are met.
      operationId: submitAgreement
      responses:
        '200':
          description: Draft agreement submitted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/activate':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: identifier of the pending agreement to be activated
    post:
      summary: Agreement Activation
      operationId: activateAgreement
      responses:
        '200':
          description: Pending agreement activated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: Activates the pending agreement if all the pre-requisites are met.
  '/agreements/{agreementId}/suspend':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
      - schema:
          type: string
          format: uuid
        name: agreementId
        in: path
        required: true
        description: identifier of the pending agreement to be suspended
    post:
      summary: Suspend Agreement
      operationId: suspendAgreement
      responses:
        '200':
          description: Active agreement suspended.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '403':
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      description: Suspends the active agreement if all the pre-requisites are met.
  /agreements:
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      summary: Agreement Creation
      operationId: createAgreement
      responses:
        '200':
          description: Agreement created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreementPayload'
        description: payload for agreement creation
        required: true
      description: creates the agreement between the involved parties.
    get:
      summary: Retrieve a list of agreements
      operationId: getAgreements
      responses:
        '200':
          description: Agreements found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreements'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
      tags:
        - agreement
      parameters:
        - in: query
          name: producerId
          schema:
            type: string
        - in: query
          name: consumerId
          schema:
            type: string
        - in: query
          name: eserviceId
          schema:
            type: string
        - in: query
          name: descriptorId
          schema:
            type: string
        - in: query
          name: states
          description: comma separated sequence of agreement states to filter the response with
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AgreementState'
            default: []
          explode: false
        - in: query
          name: latest
          schema:
            type: boolean
  '/agreements/{agreementId}':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    get:
      tags:
        - agreement
      summary: retrieves an agreement
      description: returns an agreement for a given agreementId
      operationId: getAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Agreement found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  '/agreements/{agreementId}/upgrade':
    parameters:
      - $ref: '#/components/parameters/CorrelationIdHeader'
      - $ref: '#/components/parameters/IpAddress'
    post:
      tags:
        - agreement
      summary: upgrades an agreement.
      description: upgrades an agreement with a newer eservice version, if any.
      operationId: upgradeAgreementById
      parameters:
        - name: agreementId
          in: path
          description: The identifier of the agreement to update
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Agreement updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agreement'
        '404':
          description: Agreement not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        '400':
          description: Invalid ID supplied
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  parameters:
    CorrelationIdHeader:
      in: header
      name: X-Correlation-Id
      required: true
      schema:
        type: string
    IpAddress:
      in: header
      name: X-Forwarded-For
      schema:
        type: string
  schemas:
    AgreementPayload:
      type: object
      description: contains the information for agreement creation.
      properties:
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
      required:
        - eserviceId
        - descriptorId
    Agreement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eserviceId:
          type: string
          format: uuid
        descriptorId:
          type: string
          format: uuid
        producerId:
          type: string
          format: uuid
        consumerId:
          type: string
          format: uuid
        state:
          $ref: '#/components/schemas/AgreementState'
        verifiedAttributes:
          type: array
          description: 'set of the verified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/VerifiedAttribute'
        certifiedAttributes:
          type: array
          description: 'set of the certified attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/CertifiedAttribute'
        declaredAttributes:
          type: array
          description: 'set of the declared attributes belonging to this agreement, if any.'
          items:
            $ref: '#/components/schemas/DeclaredAttribute'
        suspendedByConsumer:
          type: boolean
        suspendedByProducer:
          type: boolean
        suspendedByPlatform:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - eserviceId
        - descriptorId
        - producerId
        - consumerId
        - state
        - verifiedAttributes
        - certifiedAttributes
        - declaredAttributes
        - createdAt
      description: business representation of an agreement
    VerifiedAttribute:
      title: VerifiedAttribute
      type: object
      description: represents the details of a verified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    CertifiedAttribute:
      title: CertifiedAttribute
      type: object
      description: represents the details of a certified attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    DeclaredAttribute:
      title: DeclaredAttribute
      type: object
      description: represents the details of a declared attribute bound to the agreement.
      properties:
        id:
          type: string
          description: identifier of the attribute as defined on the attribute registry
          format: uuid
      required:
        - id
    Agreements:
      type: array
      items:
        $ref: '#/components/schemas/Agreement'
    AgreementState:
      type: string
      description: Agreement State
      enum:
        - DRAFT
        - ACTIVE
        - INACTIVE
        - PENDING
        - SUSPENDED
        - MISSING_CERTIFIED_ATTRIBUTES
    Problem:
      properties:
        type:
          description: URI reference of type definition
          type: string
        status:
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          example: 503
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 100
          type: integer
        title:
          description: A short, summary of the problem type. Written in english and readable
          example: Service Unavailable
          maxLength: 64
          pattern: '^[ -~]{0,64}$'
          type: string
        detail:
          description: A human readable explanation of the problem.
          example: Request took too long to complete.
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
        errors:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ProblemError'
      additionalProperties: false
      required:
        - type
        - status
        - title
        - errors
    ProblemError:
      properties:
        code:
          description: Internal code of the error
          example: 123-4567
          minLength: 8
          maxLength: 8
          pattern: '^[0-9]{3}-[0-9]{4}$'
          type: string
        detail:
          description: A human readable explanation specific to this occurrence of the problem.
          example: Parameter not valid
          maxLength: 4096
          pattern: '^.{0,1024}$'
          type: string
      required:
        - code
        - detail
  securitySchemes:
    bearerAuth:
      type: http
      description: 'A bearer token in the format of a JWS and conformed to the specifications included in [RFC8725](https://tools.ietf.org/html/RFC8725).'
      scheme: bearer
      bearerFormat: JWT