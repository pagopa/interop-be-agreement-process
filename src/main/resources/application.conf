akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  coordinated-shutdown.run-by-actor-system-terminate = on
  management {
    http {
      hostname = "0.0.0.0"
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.agreementprocess.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.agreementprocess.server.impl.LiveCheck"
      }
    }
  }
}

agreement-process {
  port = 8088
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }
  user-registry-api-key = ${USER_REGISTRY_API_KEY}
  party-process-api-key = ${PARTY_PROCESS_API_KEY}
  services {
    catalog-management              = ${CATALOG_MANAGEMENT_URL}
    tenant-management               = ${TENANT_MANAGEMENT_URL}
    agreement-management            = ${AGREEMENT_MANAGEMENT_URL}
    attribute-registry-management   = ${ATTRIBUTE_REGISTRY_MANAGEMENT_URL}
    authorization-management        = ${AUTHORIZATION_MANAGEMENT_URL}
    party-process                   = ${PARTY_PROCESS_URL}
    user-registry                   = ${USER_REGISTRY_URL}
  }

  queue {
    archiving-purposes {
      name = ${ARCHIVING_PURPOSES_QUEUE_NAME}
    }
    archiving-eservices {
      name = ${ARCHIVING_ESERVICES_QUEUE_NAME}
    }
    certified-mail  {
      name = ${CERTIFIED_MAIL_QUEUE_NAME}
      message-group-id = ${MESSAGE_GROUP_ID}
    }
  }

  storage {
    kind = "S3"
    container = ${STORAGE_CONTAINER}
    agreement-contract-path = "agreement/contracts"
    agreement-contract-path = ${?AGREEMENT_CONTRACTS_PATH}
    consumer-documents-path = "agreement/consumer-docs"
    consumer-documents-path = ${?CONSUMER_DOCS_PATH}
  }

   read-model {
    db {
      name = ${READ_MODEL_DB_NAME}
      connection-string = "mongodb://"${READ_MODEL_DB_USER}":"${READ_MODEL_DB_PASSWORD}"@"${READ_MODEL_DB_HOST}":"${READ_MODEL_DB_PORT}"/"${READ_MODEL_DB_NAME}"?replicaSet=rs0&readPreference=secondaryPreferred"
    }
  }
}

interop-commons {
  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

akka.http {
  server {
    pipelining-limit = 128 # default 1
    pipelining-limit = ${?PIPELINING_LIMIT}
    backlog = 100 # default 100
    backlog = ${?BACKLOG_SIZE}
  }

  host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 256
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-factor = 1.0
    core-pool-size-max = 16
    max-pool-size-min = 4
    max-pool-size-factor = 1.0
    max-pool-size-max = 16
  }
  throughput = 1
  throughput = ${?BLOCKING_DISPATCHER_THROUGHPUT}
}
