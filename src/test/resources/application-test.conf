akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
  use-slf4j = on
}

agreement-process {
  port = 8088
  jwt {
    audience = "aud"
  }
  user-registry-api-key = "user-registry-api-key"
  party-process-api-key = "party-process-api-key"
  services {
    catalog-management             = "catalog-management"
    tenant-management              = "tenant-management"
    agreement-management           = "agreement-management"
    attribute-registry-management  = "attribute-registry-management"
    authorization-management       = "authorization-management"
    tenant-management              = "tenant-management"
    user-registry                  = "user-registry"
    party-process                  = "party-process"
  }

  queue {
    archiving-purposes {
      name = "archiving-purposes-queue-name"
    }
    archiving-eservices {
      name = "archiving-eservices-queue-name"
    }
    certified-mail  {
      name = "certified-mail-queue-name"
      message-group-id = "message-group-id"
    }
  }

  storage {
    kind = "S3"
    container = "the/container"
    agreement-contract-path = "agreement/contracts"
    consumer-documents-path = "agreement/consumer-docs"
  }

  read-model {
    db {
      name = "dbname"
      connection-string = "mongodb://user:password@localhost:1/dname?replicaSet=rs0&readPreference=secondaryPreferred"
    }
  }
}